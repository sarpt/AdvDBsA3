1)Record dish order:
	//pseudo sql here
	For each INGREDIENT in RECIPE do
		SELECT WeightRecp multiply by 'SOME AMOUNT OF DISH ORDERED' 
		and comare with weight in STOCK
		
		SELECT for all Chefs if their contract is not outdated
		and their Hours are available for the current time
  
	If STOCKS are sufficient FOR EVERY INGREDIENT then
		INSERT INTO COOK_LOG
		
		INSERT the income (price*amount) INTO RESOURCES
	Else
		UPDATE WeightMissing for INGREDIENT_STOCK

2)Check if the whole menu is available:
	//pseudo sql here
	SELECT IngrStockID FROM INGREDIENT_STOCK 
	JOIN INGREDIENT ON IngrStockID
	GROUP BY IngrStockID, WeightRecp
	HAVING SUM(WeightRecp) > WeightAvail
  
	UPDATE WeightMissing in INGREDIENT_STOCK
  
	INSERT INTO SUPPLY_REQUEST to make pending request for SUPPLY

3)Make a request for SUPPLY:
	//pseudo sql here
	If SUPPLY_REQUEST has rows with 'NONSATISFIED':
		For each such row:
			//choose the best supplier
			SupplierID,suppl_price = (SELECT SupplierID, MIN(Price),MAX(Reliability) 
								FROM SUPPLIER_STOCK 
								JOIN INGREDIENT_STOCK
								JOIN SUPPLY_REQUEST ON IngrStockID 
								WHERE State 'NOTSATISFIED'
								AND WeightAvail >= WeightMissing
								AND WeightMissing >= 0)
			
			If SupplierID is not null:
				restourantTotal = SELECT SUM(Total) FROM RESOURCES
				If restourantTotal >= suppl_price:				

					UPDATE SUPPLY_REQUEST State for 'SATISFIED'
					UPDATE WeightAvail in RECIPE_STOCK
			
			//we should alse update SUPPLIER_STOCK but not in this transaction i guess
	
4)Create new recipe:
	//pseudo sql here
	INSERT INTO RECIPE
	INSERT INTO INGREDIENT
  
	//update availability of the menu
	Buf =(SELECT IngrStockID FROM INGREDIENT_STOCK 
		JOIN INGREDIENT ON IngrStockID
		GROUP BY IngrStockID, WeightRecp
		HAVING SUM(WeightRecp) > WeightAvail)
  
	If Buf not empty:
		UPDATE WeightMissing in INGREDIENT_STOCK
	
		INSERT INTO SUPPLY_REQUEST to make pending request for SUPPLY

######## calculation of income is not a transaction
######## transaction is moving the DB from one stable state to another
######## shift rearangement is just a update not a transaction
5)Hire Chef:
	INPUT Salary	
	INPUT RecipeTitle that Chef can cook
	
	all_salaries = SELECT SUM(Salary) FROM EMPLOYEE
	total = SELECT Total FROM RESOURCES
	
	If all_salaries + salarie < total:
		INSERT INTO EMPLOYEE
		UPDATE RECIPE_DUTIES 
		INSERT INTO SCHEDULE
		
		
6)Remove Chef:
	SELECT all recipes in which chef participated
	UPDATE RECIPE_DUTIES 
	DELETE FROM SCHEDULE
	DELETE FROM EMPLOYEE

7)Update Stocks:
	INSERT new_supplies with new DateFreshSupply INTO SUPPLIER_STOCK with some SupplierID
	SELECT previous DateFreshSupply for SupplierID and check if it is less than 2 days
	If DateFreshSupply_new - DateFreshSupply_old < 2:
		UPDATE SUPPLIER INC(Reliability )